{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SubKube Developers. Here you will find all relevant information to deploy your application on SubKube.","title":"Home"},{"location":"cli/","text":"SubKube offers a simple CLI tool to interact with your SubKube Projects and Namespaces, called subctl . Installation The subctl is written in python, using click, and as such is easiest installed using pip as shown below, but self-contained binaries are available for most platforms as well. pip install git+https://github.com/subkube/subctl Usage subctl login subctl get project subctl get namespace subctl use project subctl use namespace subctl create namespace subctl create project","title":"subctl"},{"location":"cli/#installation","text":"The subctl is written in python, using click, and as such is easiest installed using pip as shown below, but self-contained binaries are available for most platforms as well. pip install git+https://github.com/subkube/subctl","title":"Installation"},{"location":"cli/#usage","text":"subctl login subctl get project subctl get namespace subctl use project subctl use namespace subctl create namespace subctl create project","title":"Usage"},{"location":"getting_started/","text":"Getting Started Signing up To start using SubKube, sign up for an account Create a Project Once you've signed up and are logged in to SubKube, you need to create a project to deploy Namespaces and Workloads to. Open the Projects page and click the Create Project button Tip For hardcore command line users, we've created subctl , a simple CLI tool allowing you to log in to SubKube and interact with your Projects and Namespace directly from your shell, just as you would with kubectl . More about subctl here Create a Namespace After creating a project, we need to create a Kubernetes Namespace to deploy our Workloads to. This can easily be done from a Project page, by clicking the Create Namespace button. Setup Kubectl In order to use kubectl , we need to setup our kubeconfig . On your projects' page you will find the Kubeconfig card, which allows you to download the kubeconfig as a file, which will be called subkubeconfig , or you can show the kubeconfig for inspection or manual copy-pasting / distribution. Tip If you have subctl installed, you can simply run the following to automatically setup your existing kubeconfig to allow access to subkube: subctl use project <project-uuid> Deploy workloads Once we have our project, namespace and kubectl configured, we can check to see if everything works by running a test pod interactively: kubectl run -n <YOUR-NAMESPACE> -i --tty busybox --image=busybox -- sh","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#signing-up","text":"To start using SubKube, sign up for an account","title":"Signing up"},{"location":"getting_started/#create-a-project","text":"Once you've signed up and are logged in to SubKube, you need to create a project to deploy Namespaces and Workloads to. Open the Projects page and click the Create Project button Tip For hardcore command line users, we've created subctl , a simple CLI tool allowing you to log in to SubKube and interact with your Projects and Namespace directly from your shell, just as you would with kubectl . More about subctl here","title":"Create a Project"},{"location":"getting_started/#create-a-namespace","text":"After creating a project, we need to create a Kubernetes Namespace to deploy our Workloads to. This can easily be done from a Project page, by clicking the Create Namespace button.","title":"Create a Namespace"},{"location":"getting_started/#setup-kubectl","text":"In order to use kubectl , we need to setup our kubeconfig . On your projects' page you will find the Kubeconfig card, which allows you to download the kubeconfig as a file, which will be called subkubeconfig , or you can show the kubeconfig for inspection or manual copy-pasting / distribution. Tip If you have subctl installed, you can simply run the following to automatically setup your existing kubeconfig to allow access to subkube: subctl use project <project-uuid>","title":"Setup Kubectl"},{"location":"getting_started/#deploy-workloads","text":"Once we have our project, namespace and kubectl configured, we can check to see if everything works by running a test pod interactively: kubectl run -n <YOUR-NAMESPACE> -i --tty busybox --image=busybox -- sh","title":"Deploy workloads"},{"location":"soon/","text":"Note Coming soon!","title":"Reference"},{"location":"api/authentication/","text":"How to authenticate with SubKube API Basic Authentication Tokens","title":"Authentication"},{"location":"api/authentication/#basic-authentication","text":"","title":"Basic Authentication"},{"location":"api/authentication/#tokens","text":"","title":"Tokens"},{"location":"api/reference/","text":"Resource API Path Projects https://api.subku.be/projects.json Project Namespaces https://api.subku.be/projects/.../namespaces.json","title":"Reference"},{"location":"concepts/project/","text":"Project In SubKube, your Kubernetes Namespaces are organised inside a Project. Project can be personal, or belong to an Organization. Namespaces Namespaces are used in Kubernetes to group Workloads together. Namespaces can operate in various levels of isolation. In SubKube, this is configurable per project. More about namespaces can be found in the Kubernetes docs Resource Quota Resource Quota are set on namespaces by Rancher based on the set Project limits. More about Resource Quotas in the Rancher (on which Subkube is built) docs Billing At Subkube, you are charged for reservation resources as specified by the limits of a project. These limits can be changed on the fly. Each hour, we calculate the total of resource limits for a certain resource type during that hour, and charge that to your subscription. If you change the limits for a project, or delete a project within that hour period, you're subscription will be charged for the applicable part of the hour, multiplied by the resource limit. Persistent Volumes Are available and can be created using normal PVC's. Storage is implemented using Longhorn CSI. More about Persistent Volumes and associated Claims can be found in the Kubernetes docs Ingress In Kubernetes, Ingress objects are used to allow your application to be accessed by the outside world, by using a reverse proxy. You can read more about the Ingress concept in the Kubernetes docs The Nginx Ingress Controller is available for all users of Subkube, including certmanager, to allow SSL certificates to be set up automatically using Let's Encrypt. The Nginx Ingress Controller allows for very flexible configuration, for a full list of all options please see the nginx-ingress docs","title":"Project"},{"location":"concepts/project/#project","text":"In SubKube, your Kubernetes Namespaces are organised inside a Project. Project can be personal, or belong to an Organization.","title":"Project"},{"location":"concepts/project/#namespaces","text":"Namespaces are used in Kubernetes to group Workloads together. Namespaces can operate in various levels of isolation. In SubKube, this is configurable per project. More about namespaces can be found in the Kubernetes docs","title":"Namespaces"},{"location":"concepts/project/#resource-quota","text":"Resource Quota are set on namespaces by Rancher based on the set Project limits. More about Resource Quotas in the Rancher (on which Subkube is built) docs","title":"Resource Quota"},{"location":"concepts/project/#billing","text":"At Subkube, you are charged for reservation resources as specified by the limits of a project. These limits can be changed on the fly. Each hour, we calculate the total of resource limits for a certain resource type during that hour, and charge that to your subscription. If you change the limits for a project, or delete a project within that hour period, you're subscription will be charged for the applicable part of the hour, multiplied by the resource limit.","title":"Billing"},{"location":"concepts/project/#persistent-volumes","text":"Are available and can be created using normal PVC's. Storage is implemented using Longhorn CSI. More about Persistent Volumes and associated Claims can be found in the Kubernetes docs","title":"Persistent Volumes"},{"location":"concepts/project/#ingress","text":"In Kubernetes, Ingress objects are used to allow your application to be accessed by the outside world, by using a reverse proxy. You can read more about the Ingress concept in the Kubernetes docs The Nginx Ingress Controller is available for all users of Subkube, including certmanager, to allow SSL certificates to be set up automatically using Let's Encrypt. The Nginx Ingress Controller allows for very flexible configuration, for a full list of all options please see the nginx-ingress docs","title":"Ingress"},{"location":"concepts/workloads/","text":"Workloads In Kubernetes, you run your application as a workload . There are various ways to orchestrate workloads, for instance using the deployment resource, the statefulSet or the daemonSet resource. Many apps consist of various different workloads, which need to work together in order to serve the application as a whole. Kubernetes has an applicable workload type for any of these. For more information on workloads, please checkout the dedicated Kubernetes docs DaemonSets DaemonSets can not be used on SubKube as it is a shared platform, where no application should need a DaemonSet.","title":"Workloads"},{"location":"concepts/workloads/#workloads","text":"In Kubernetes, you run your application as a workload . There are various ways to orchestrate workloads, for instance using the deployment resource, the statefulSet or the daemonSet resource. Many apps consist of various different workloads, which need to work together in order to serve the application as a whole. Kubernetes has an applicable workload type for any of these. For more information on workloads, please checkout the dedicated Kubernetes docs","title":"Workloads"},{"location":"concepts/workloads/#daemonsets","text":"DaemonSets can not be used on SubKube as it is a shared platform, where no application should need a DaemonSet.","title":"DaemonSets"}]}